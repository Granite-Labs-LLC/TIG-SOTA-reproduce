/*!
Copyright 2025 Granite Labs LLC

Identity of Submitter [name of person or entity that submits the Work to TIG]

Licensed under the TIG Inbound Game License v2.0 or (at your option) any later
version (the "License"); you may not use this file except in compliance with the
License. You may obtain a copy of the License at

https://github.com/tig-foundation/tig-monorepo/tree/main/docs/licenses

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
language governing permissions and limitations under the License.
*/

//
// stat_filter
//
// Filtering based on Median Absolute Deviation (MAD):
// We compute the median of all L2 norms, then calculate the MAD (median of
// absolute deviations from the median). The threshold is set to:
//      norm_threshold = scale_factor × MAD × 1.4826
// The factor 1.4826 scales MAD to match the standard deviation for normally
// distributed data. This makes the filter more robust to outliers compared to
// filtering methods based on mean and standard deviation, which are more
// sensitive to extreme values.
//
// Reference:
// - NIST Engineering Statistics Handbook:
//   https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h.htm
// - See also: https://www.itl.nist.gov/div898/handbook/eda/section3/eda356.htm
//

#include <float.h>

extern "C" __global__ void compute_vector_stats_kernel(
    const float* vector_database,
    float* norm_l2,
    float* norm_l2_squared,
    int vector_database_len,
    const int vector_size
)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    double norm_sq = 0.0;

    if (i < vector_database_len) {
        int idx = i * vector_size;
        for (int j = 0; j < vector_size; j++) {
            double value = vector_database[idx + j];
            norm_sq += value * value;
        }
        norm_l2_squared[i] = norm_sq;
        norm_l2[i] = sqrt(norm_sq);
    }
}

extern "C" __global__ void find_nearest_neighbor_kernel(
    const float* __restrict__ query_vectors,
    const float* __restrict__ vector_database,
    const float* __restrict__ norm_l2,
    const float* __restrict__ norm_l2_squared,
    int* __restrict__ query_results,
    const float max_distance,
    const int vector_database_len,
    const int query_vectors_len,
    const int vector_size,
    const float precomputed_threshold
)
{
    int q = blockIdx.x;
    if (q >= query_vectors_len) return;

    extern __shared__ char shared_memory[];
    int* smem_candidate_index = (int*)shared_memory;
    float* smem_candidate_distance = (float*)(smem_candidate_index + blockDim.x);
    float* smem_query_vector = (float*)(smem_candidate_distance + blockDim.x);

    for (int j = threadIdx.x; j < vector_size; j += blockDim.x) {
        smem_query_vector[j] = query_vectors[q * vector_size + j];
    }
    __syncthreads();

    __shared__ float norm_threshold;
    __shared__ float query_norm_sq;
    __shared__ float query_norm;

    if (threadIdx.x == 0) {
        norm_threshold = precomputed_threshold;
        float sum_sq = 0.0f;
        for (int j = 0; j < vector_size; ++j) {
            float v = smem_query_vector[j];
            sum_sq = fmaf(v, v, sum_sq);
        }
        query_norm_sq = sum_sq;
        query_norm = sqrtf(sum_sq);
    }
    __syncthreads();

    float best_distance = FLT_MAX;
    int   best_index    = INT_MAX;
    int i = threadIdx.x;

    while (i < vector_database_len) {
        float norm_diff = fabsf(norm_l2[i] - query_norm);
        if (norm_diff <= norm_threshold) {
            float dot = 0.0f;
            for (int j = 0; j < vector_size; j++) {
                dot = fmaf(smem_query_vector[j], vector_database[i * vector_size + j], dot);
            }
            float distance_sq = query_norm_sq + norm_l2_squared[i] - 2.0f * dot;
            if (distance_sq < best_distance) {
                best_index = i;
                best_distance = distance_sq;
            }
        }
        i += blockDim.x;
    }

    smem_candidate_index[threadIdx.x]    = best_index;
    smem_candidate_distance[threadIdx.x] = best_distance;
    __syncthreads();

    for (int stride = blockDim.x / 2; stride > 0; stride /= 2) {
        if (threadIdx.x < stride) {
            if (smem_candidate_distance[threadIdx.x + stride] < smem_candidate_distance[threadIdx.x]) {
                smem_candidate_distance[threadIdx.x] = smem_candidate_distance[threadIdx.x + stride];
                smem_candidate_index[threadIdx.x] = smem_candidate_index[threadIdx.x + stride];
            }
        }
        __syncthreads();
    }

    if (threadIdx.x == 0) {
        query_results[q] = smem_candidate_index[0];
    }
}

